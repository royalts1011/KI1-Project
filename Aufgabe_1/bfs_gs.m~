function [ V, L ] = bfs_gs( A, startState, goalState )

%Implementieren Sie hier die Breitensuche als Graphsuche.

V = [];                                     % Array speichert Knoten des Pfades
L = [];                                     % Array speichert ???
max = length(A);                            % Maximale Anzahl besuchter Knoten.
discovered = false(1,max);                  % Es gibt maximal maxRounds Knoten, die man sich anschauen kann.
queue = [startState];                       % In der queue ist aktuell nu der Startzustand
discovered(startState + 1) = true;          % Da Startzustand bereits betrachtet, setzen wir
                                            % in discovered auf bereits
                                            % besucht(true). +1, da wir bei
                                            % 1 Anfangen zu zählen.

while ~isempty(queue)
    
    max = max - 1;
    if max == 0                                     % prüfen, ob maxRounds erreicht wurde
         fprintf('Suche benoetigt zu viel Zeit')    % wenn ja Schleife
         return                                     % beenden.
    end

    current = queue(1)           % Vorne aus der Queue wir der erste Knoten genommen.
    queue(1) = [];                % Knoten aus Warteschlange wird gelöscht                   
    V = [V, current];             % Knoten wird dem Pfad hinzugefügt


    if current == goalState       % Prüfen, ob current unser Ziel ist
        return                    % Wenn ja beenden, da gefunden.
    end

    for i = 1 : max
        break
        if discovered(i) == false && A(current+1,i) == 1
            discovered(i) = true
            queue = [queue, i-1]
    end
    
                                          
end

end